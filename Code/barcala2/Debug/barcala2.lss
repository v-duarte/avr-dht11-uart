
barcala2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  000006a4  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080023c  0080023c  00000874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169a  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b70  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aef  00000000  00000000  00002c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00003718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072f  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b97  00000000  00000000  000041b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_18>
  4c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 23 01 	call	0x246	; 0x246 <main>
  9e:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT_init>:
 */ 

#include "dht11.h"

void DHT_init() {
	DDRC |= (1<<PORTC0);	//Salida
  a6:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1<<PORTC0);
  a8:	40 9a       	sbi	0x08, 0	; 8
  aa:	08 95       	ret

000000ac <Cargar_dato>:
					_delay_us(1);
					contador++;
				}

		contador = 0;							// Inicio el contador en 0.
		while(PINC & (1<<PORTC0))				// Mientras la señal esta en 1.
  ac:	28 e0       	ldi	r18, 0x08	; 8
  ae:	30 e0       	ldi	r19, 0x00	; 0
}

uint8_t Cargar_dato()						/* Leer 8 bits en 4ms aproximadamente*/
{
	uint8_t contador;
	uint8_t aux = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	19 c0       	rjmp	.+50     	; 0xe6 <Cargar_dato+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	45 e0       	ldi	r20, 0x05	; 5
  b6:	4a 95       	dec	r20
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Cargar_dato+0xa>
  ba:	00 00       	nop
	for (int i=0; i<8; i++)
	{
		while((PINC & (1<<PORTC0)) == 0)		// descarto la parte en bajo de la señal del dato.
  bc:	30 9b       	sbis	0x06, 0	; 6
  be:	fa cf       	rjmp	.-12     	; 0xb4 <Cargar_dato+0x8>
					_delay_us(1);
					contador++;
				}

		contador = 0;							// Inicio el contador en 0.
		while(PINC & (1<<PORTC0))				// Mientras la señal esta en 1.
  c0:	30 9b       	sbis	0x06, 0	; 6
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <Cargar_dato+0x2c>
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	45 e0       	ldi	r20, 0x05	; 5
  c8:	4a 95       	dec	r20
  ca:	f1 f7       	brne	.-4      	; 0xc8 <Cargar_dato+0x1c>
  cc:	00 00       	nop
		{
			_delay_us(1);
			contador++;
  ce:	9f 5f       	subi	r25, 0xFF	; 255
					_delay_us(1);
					contador++;
				}

		contador = 0;							// Inicio el contador en 0.
		while(PINC & (1<<PORTC0))				// Mientras la señal esta en 1.
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <Cargar_dato+0x1a>
		{
			_delay_us(1);
			contador++;
		}
		if((contador)<40){				//si el tiempo es mayor a 28us, entonces almacenamos un 1. En caso contrario es un 0.
  d4:	98 32       	cpi	r25, 0x28	; 40
  d6:	10 f4       	brcc	.+4      	; 0xdc <Cargar_dato+0x30>
			aux = (aux<<1);					//shift de la variable una unidad a la izquierda
  d8:	88 0f       	add	r24, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <Cargar_dato+0x34>
		}
		else
		{
			aux = (aux<<1)|(0x01);			// shift y hacemos un or con 1 en la posicion final. para ingresar el 1.
  dc:	88 0f       	add	r24, r24
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	31 09       	sbc	r19, r1

uint8_t Cargar_dato()						/* Leer 8 bits en 4ms aproximadamente*/
{
	uint8_t contador;
	uint8_t aux = 0;
	for (int i=0; i<8; i++)
  e4:	19 f0       	breq	.+6      	; 0xec <Cargar_dato+0x40>
	{
		while((PINC & (1<<PORTC0)) == 0)		// descarto la parte en bajo de la señal del dato.
  e6:	30 9b       	sbis	0x06, 0	; 6
  e8:	e5 cf       	rjmp	.-54     	; 0xb4 <Cargar_dato+0x8>
  ea:	ea cf       	rjmp	.-44     	; 0xc0 <Cargar_dato+0x14>
		{
			aux = (aux<<1)|(0x01);			// shift y hacemos un or con 1 en la posicion final. para ingresar el 1.
		}
	}
	return aux;
}
  ec:	08 95       	ret

000000ee <DHT_Scan>:


void DHT_Scan(uint8_t *h_hum, uint8_t *l_hum, uint8_t *h_temp, uint8_t *l_temp) //Retorna 2 datos enteros.
{	
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	6c 01       	movw	r12, r24
 100:	7b 01       	movw	r14, r22
 102:	8a 01       	movw	r16, r20
 104:	e9 01       	movw	r28, r18
	uint8_t check_sum;
	
	PORTC &=~(1<<PORTC0);				// colocamos en 0 la salida durante 18ms
 106:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <DHT_Scan+0x20>
 116:	00 c0       	rjmp	.+0      	; 0x118 <DHT_Scan+0x2a>
 118:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1<<PORTC0);				// colocamos en 1 la salida
 11a:	40 9a       	sbi	0x08, 0	; 8
	DDRC &=~(1<<PORTC0);				//Convertimos el puerto en entrada.
 11c:	38 98       	cbi	0x07, 0	; 7
	
	while(PINC & (1<<PORTC0));			//Espero a que llegue el 0 en la parte baja de la respuesta.
 11e:	30 99       	sbic	0x06, 0	; 6
 120:	fe cf       	rjmp	.-4      	; 0x11e <DHT_Scan+0x30>
	while((PINC & (1<<PORTC0))==0);		//cuando lee 0 espera durante 80us.
 122:	30 9b       	sbis	0x06, 0	; 6
 124:	fe cf       	rjmp	.-4      	; 0x122 <DHT_Scan+0x34>
	while(PINC & (1<<PORTC0));			//cuando lee 1 espera durante 80us.  Tiempos, donde en dispositivo informa q va a transmitir.
 126:	30 99       	sbic	0x06, 0	; 6
 128:	fe cf       	rjmp	.-4      	; 0x126 <DHT_Scan+0x38>
	
	*h_hum = Cargar_dato();
 12a:	0e 94 56 00 	call	0xac	; 0xac <Cargar_dato>
 12e:	f6 01       	movw	r30, r12
 130:	80 83       	st	Z, r24
	*l_hum = Cargar_dato();
 132:	0e 94 56 00 	call	0xac	; 0xac <Cargar_dato>
 136:	f7 01       	movw	r30, r14
 138:	80 83       	st	Z, r24
	*h_temp= Cargar_dato();
 13a:	0e 94 56 00 	call	0xac	; 0xac <Cargar_dato>
 13e:	f8 01       	movw	r30, r16
 140:	80 83       	st	Z, r24
	*l_temp = Cargar_dato();
 142:	0e 94 56 00 	call	0xac	; 0xac <Cargar_dato>
 146:	88 83       	st	Y, r24
	check_sum = Cargar_dato();
 148:	0e 94 56 00 	call	0xac	; 0xac <Cargar_dato>
	

	
	if (check_sum == (*h_hum + *l_hum + *h_temp + *l_temp))  // sumar todos h y l hum y temp. y verificar que sea igual a check_sum.
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	f6 01       	movw	r30, r12
 150:	40 81       	ld	r20, Z
 152:	f7 01       	movw	r30, r14
 154:	20 81       	ld	r18, Z
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	24 0f       	add	r18, r20
 15a:	31 1d       	adc	r19, r1
 15c:	f8 01       	movw	r30, r16
 15e:	40 81       	ld	r20, Z
 160:	24 0f       	add	r18, r20
 162:	31 1d       	adc	r19, r1
 164:	48 81       	ld	r20, Y
 166:	24 0f       	add	r18, r20
 168:	31 1d       	adc	r19, r1
 16a:	82 17       	cp	r24, r18
 16c:	93 07       	cpc	r25, r19
 16e:	41 f0       	breq	.+16     	; 0x180 <DHT_Scan+0x92>
	{
		
	}
	else
	{
		*h_hum = 255;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	f6 01       	movw	r30, r12
 174:	80 83       	st	Z, r24
		*l_hum = 255;
 176:	f7 01       	movw	r30, r14
 178:	80 83       	st	Z, r24
		*h_temp = 255;
 17a:	f8 01       	movw	r30, r16
 17c:	80 83       	st	Z, r24
		*l_temp = 255;
 17e:	88 83       	st	Y, r24
	}	
	PORTC |= (1<<PORTC0);
 180:	40 9a       	sbi	0x08, 0	; 8
	DDRC |= (1<<PORTC0);	//Salida	
 182:	38 9a       	sbi	0x07, 0	; 7
	
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	df 90       	pop	r13
 192:	cf 90       	pop	r12
 194:	08 95       	ret

00000196 <main_update>:
#include "main.h"

static char msj_error[]= "Comando no valido\n\r";
volatile static unsigned char flag_registrador = 0;

void main_update(void){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	00 d0       	rcall	.+0      	; 0x19c <main_update+0x6>
 19c:	00 d0       	rcall	.+0      	; 0x19e <main_update+0x8>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <main_update+0xa>
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	char cadena[6]=""; //En esta variable se va a guardar la cadena ingresada por el usuario
 1a4:	1a 82       	std	Y+2, r1	; 0x02
 1a6:	19 82       	std	Y+1, r1	; 0x01
 1a8:	fe 01       	movw	r30, r28
 1aa:	33 96       	adiw	r30, 0x03	; 3
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	df 01       	movw	r26, r30
 1b0:	1d 92       	st	X+, r1
 1b2:	8a 95       	dec	r24
 1b4:	e9 f7       	brne	.-6      	; 0x1b0 <main_update+0x1a>
	SerialPort_Get_String_From_Buffer(cadena);
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0e 94 34 02 	call	0x468	; 0x468 <SerialPort_Get_String_From_Buffer>
	if (strcmp((const char*)cadena,(const char*)"ON")==0) //Si el usuario ingreso el comando 'ON'
 1be:	64 e1       	ldi	r22, 0x14	; 20
 1c0:	71 e0       	ldi	r23, 0x01	; 1
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	0e 94 12 03 	call	0x624	; 0x624 <strcmp>
 1ca:	89 2b       	or	r24, r25
 1cc:	41 f4       	brne	.+16     	; 0x1de <main_update+0x48>
	{
		SerialPort_Send_String("Encendido\n\r");
 1ce:	87 e1       	ldi	r24, 0x17	; 23
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
		flag_registrador = 1; //Enciendo el flag para mostrar del sensor
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <main_update+0x9e>
	}
	else
	{
		if (strcmp((const char*)cadena,(const char*)"OFF")==0) //Si el usuario ingreso el comando 'OFF'
 1de:	63 e2       	ldi	r22, 0x23	; 35
 1e0:	71 e0       	ldi	r23, 0x01	; 1
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	0e 94 12 03 	call	0x624	; 0x624 <strcmp>
 1ea:	89 2b       	or	r24, r25
 1ec:	61 f4       	brne	.+24     	; 0x206 <main_update+0x70>
		{
			SerialPort_Send_String("Apagado\n\r");
 1ee:	87 e2       	ldi	r24, 0x27	; 39
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
			if (flag_registrador){	//Apago el flag para mostrar del sensor
 1f6:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 1fa:	81 11       	cpse	r24, r1
				flag_registrador = 0;
 1fc:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
			}
			SerialPort_TX_Interrupt_Disable();
 200:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <SerialPort_TX_Interrupt_Disable>
 204:	17 c0       	rjmp	.+46     	; 0x234 <main_update+0x9e>
		}
		else
		{
			if (strcmp((const char*)cadena,(const char*)"RST")==0) //Si el usuario ingreso el comando 'RST'
 206:	61 e3       	ldi	r22, 0x31	; 49
 208:	71 e0       	ldi	r23, 0x01	; 1
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 12 03 	call	0x624	; 0x624 <strcmp>
 212:	89 2b       	or	r24, r25
 214:	59 f4       	brne	.+22     	; 0x22c <main_update+0x96>
			{
				mostrarMenu();
 216:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mostrarMenu>
				SerialPort_TX_Interrupt_Enable();
 21a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SerialPort_TX_Interrupt_Enable>
				if (flag_registrador){	//Apago el flag para mostrar del sensor
 21e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 222:	88 23       	and	r24, r24
 224:	39 f0       	breq	.+14     	; 0x234 <main_update+0x9e>
					flag_registrador = 0;
 226:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
 22a:	04 c0       	rjmp	.+8      	; 0x234 <main_update+0x9e>
				}
			}
			else //Caso en el que el usuario no ingreso ningun comando valido
			{
				SerialPort_Send_String(msj_error);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
			}
		}
	}
}
 234:	26 96       	adiw	r28, 0x06	; 6
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:

int main(void)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	29 97       	sbiw	r28, 0x09	; 9
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
	DHT_init();			//configurar dht11
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT_init>
	uint8_t l_temp;
	uint8_t h_hum;
	uint8_t l_hum;
	char data[5];
	
	SerialPort_Init(0x67);						//Configuro el UART 9600bps, 8 bit data, 1 stop @ F_CPU = 16MHz.
 25e:	87 e6       	ldi	r24, 0x67	; 103
 260:	0e 94 c4 01 	call	0x388	; 0x388 <SerialPort_Init>
												
	SerialPort_TX_Enable();						//Inicio el transmisor
 264:	0e 94 cc 01 	call	0x398	; 0x398 <SerialPort_TX_Enable>
	SerialPort_TX_Interrupt_Enable();
 268:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <SerialPort_TX_Interrupt_Enable>
												
	SerialPort_RX_Enable();						//Inicio el receptor
 26c:	0e 94 de 01 	call	0x3bc	; 0x3bc <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();			
 270:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SerialPort_RX_Interrupt_Enable>
												
	sei();										//Activo el flag global para interrupciones
 274:	78 94       	sei
												
	mostrarMenu();								//Muestro el menu principal
 276:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mostrarMenu>
		}
		else
		if (flag_registrador){	//Si se ingreso del comando ON
			DHT_Scan(&h_hum, &l_hum, &h_temp, &l_temp);
			
			if ((h_hum < (255)) & (h_temp < (255)) & (h_hum < (255)) & (h_temp < (255)))
 27a:	01 e0       	ldi	r16, 0x01	; 1
 27c:	10 e0       	ldi	r17, 0x00	; 0
												
	mostrarMenu();								//Muestro el menu principal
	
	while (1)
	{
		if(get_flag_enter()){		//El usuario ingreso la tecla ENTER
 27e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <get_flag_enter>
 282:	88 23       	and	r24, r24
 284:	51 f0       	breq	.+20     	; 0x29a <main+0x54>
			main_update();			//El programa responde dependiendo del comando
 286:	0e 94 cb 00 	call	0x196	; 0x196 <main_update>
			set_flag_enter(0);
 28a:	81 2f       	mov	r24, r17
 28c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <set_flag_enter>
			SerialPort_Send_String("\n\r");
 290:	8d eb       	ldi	r24, 0xBD	; 189
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 298:	f2 cf       	rjmp	.-28     	; 0x27e <main+0x38>
		}
		else
		if (flag_registrador){	//Si se ingreso del comando ON
 29a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 29e:	88 23       	and	r24, r24
 2a0:	71 f3       	breq	.-36     	; 0x27e <main+0x38>
			DHT_Scan(&h_hum, &l_hum, &h_temp, &l_temp);
 2a2:	9e 01       	movw	r18, r28
 2a4:	2e 5f       	subi	r18, 0xFE	; 254
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	ae 01       	movw	r20, r28
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255
 2ae:	be 01       	movw	r22, r28
 2b0:	6c 5f       	subi	r22, 0xFC	; 252
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	ce 01       	movw	r24, r28
 2b6:	03 96       	adiw	r24, 0x03	; 3
 2b8:	0e 94 77 00 	call	0xee	; 0xee <DHT_Scan>
			
			if ((h_hum < (255)) & (h_temp < (255)) & (h_hum < (255)) & (h_temp < (255)))
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	90 2f       	mov	r25, r16
 2c0:	29 81       	ldd	r18, Y+1	; 0x01
 2c2:	2f 3f       	cpi	r18, 0xFF	; 255
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <main+0x82>
 2c6:	91 2f       	mov	r25, r17
 2c8:	99 23       	and	r25, r25
 2ca:	09 f4       	brne	.+2      	; 0x2ce <main+0x88>
 2cc:	4f c0       	rjmp	.+158    	; 0x36c <main+0x126>
 2ce:	90 2f       	mov	r25, r16
 2d0:	8f 3f       	cpi	r24, 0xFF	; 255
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <main+0x90>
 2d4:	91 2f       	mov	r25, r17
 2d6:	99 23       	and	r25, r25
 2d8:	09 f4       	brne	.+2      	; 0x2dc <main+0x96>
 2da:	48 c0       	rjmp	.+144    	; 0x36c <main+0x126>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2dc:	4a e0       	ldi	r20, 0x0A	; 10
 2de:	be 01       	movw	r22, r28
 2e0:	6b 5f       	subi	r22, 0xFB	; 251
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 1b 03 	call	0x636	; 0x636 <__itoa_ncheck>
			{
				itoa(h_hum,data,10);
				SerialPort_Send_String("Humedad: ");
 2ea:	85 e3       	ldi	r24, 0x35	; 53
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
				SerialPort_Send_String(data);
 2f2:	ce 01       	movw	r24, r28
 2f4:	05 96       	adiw	r24, 0x05	; 5
 2f6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
				SerialPort_Send_String(".");
 2fa:	85 e5       	ldi	r24, 0x55	; 85
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 302:	8c 81       	ldd	r24, Y+4	; 0x04
 304:	4a e0       	ldi	r20, 0x0A	; 10
 306:	be 01       	movw	r22, r28
 308:	6b 5f       	subi	r22, 0xFB	; 251
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 1b 03 	call	0x636	; 0x636 <__itoa_ncheck>
				itoa(l_hum,data,10);
				SerialPort_Send_String(data);
 312:	ce 01       	movw	r24, r28
 314:	05 96       	adiw	r24, 0x05	; 5
 316:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
				SerialPort_Send_String("\r\n");
 31a:	8f e3       	ldi	r24, 0x3F	; 63
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
				SerialPort_Send_String("Temperatura: ");
 322:	82 e4       	ldi	r24, 0x42	; 66
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	4a e0       	ldi	r20, 0x0A	; 10
 32e:	be 01       	movw	r22, r28
 330:	6b 5f       	subi	r22, 0xFB	; 251
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 1b 03 	call	0x636	; 0x636 <__itoa_ncheck>
				itoa(h_temp,data,10);
				SerialPort_Send_String(data);
 33a:	ce 01       	movw	r24, r28
 33c:	05 96       	adiw	r24, 0x05	; 5
 33e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
				SerialPort_Send_String(".");
 342:	85 e5       	ldi	r24, 0x55	; 85
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	4a e0       	ldi	r20, 0x0A	; 10
 34e:	be 01       	movw	r22, r28
 350:	6b 5f       	subi	r22, 0xFB	; 251
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 1b 03 	call	0x636	; 0x636 <__itoa_ncheck>
				itoa(l_temp,data,10);
				SerialPort_Send_String(data);
 35a:	ce 01       	movw	r24, r28
 35c:	05 96       	adiw	r24, 0x05	; 5
 35e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
				SerialPort_Send_String("\r\n");
 362:	8f e3       	ldi	r24, 0x3F	; 63
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 36a:	04 c0       	rjmp	.+8      	; 0x374 <main+0x12e>
			}
			else
			{
				SerialPort_Send_String("Error.");
 36c:	80 e5       	ldi	r24, 0x50	; 80
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	87 e9       	ldi	r24, 0x97	; 151
 378:	9a e3       	ldi	r25, 0x3A	; 58
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <main+0x134>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x13e>
 384:	00 00       	nop
 386:	7b cf       	rjmp	.-266    	; 0x27e <main+0x38>

00000388 <SerialPort_Init>:
	if ( (UCSR0A & (1<<RXC0))==1) {
		*dato=UDR0;
		return 1;
	}
	return 0; //no data
}
 388:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 38c:	96 e0       	ldi	r25, 0x06	; 6
 38e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 392:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 396:	08 95       	ret

00000398 <SerialPort_TX_Enable>:
 398:	e1 ec       	ldi	r30, 0xC1	; 193
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	88 60       	ori	r24, 0x08	; 8
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <SerialPort_TX_Interrupt_Enable>:
 3a4:	e1 ec       	ldi	r30, 0xC1	; 193
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 62       	ori	r24, 0x20	; 32
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <SerialPort_TX_Interrupt_Disable>:
 3b0:	e1 ec       	ldi	r30, 0xC1	; 193
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	8f 7d       	andi	r24, 0xDF	; 223
 3b8:	80 83       	st	Z, r24
 3ba:	08 95       	ret

000003bc <SerialPort_RX_Enable>:
 3bc:	e1 ec       	ldi	r30, 0xC1	; 193
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	80 83       	st	Z, r24
 3c6:	08 95       	ret

000003c8 <SerialPort_RX_Interrupt_Enable>:
 3c8:	e1 ec       	ldi	r30, 0xC1	; 193
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	80 83       	st	Z, r24
 3d2:	08 95       	ret

000003d4 <SerialPort_Wait_For_TX_Buffer_Free>:
 3d4:	e0 ec       	ldi	r30, 0xC0	; 192
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	85 ff       	sbrs	r24, 5
 3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <SerialPort_Wait_For_TX_Buffer_Free+0x4>
 3de:	08 95       	ret

000003e0 <SerialPort_Send_String>:
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 81       	ld	r18, Z
 3f2:	22 23       	and	r18, r18
 3f4:	b1 f0       	breq	.+44     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f6:	7c 01       	movw	r14, r24
 3f8:	8c 01       	movw	r16, r24
 3fa:	c0 e0       	ldi	r28, 0x00	; 0
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f6 ec       	ldi	r31, 0xC6	; 198
 400:	cf 2e       	mov	r12, r31
 402:	d1 2c       	mov	r13, r1
 404:	f0 2d       	mov	r31, r0
 406:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <SerialPort_Wait_For_TX_Buffer_Free>
 40a:	f8 01       	movw	r30, r16
 40c:	90 81       	ld	r25, Z
 40e:	f6 01       	movw	r30, r12
 410:	90 83       	st	Z, r25
 412:	cf 5f       	subi	r28, 0xFF	; 255
 414:	87 01       	movw	r16, r14
 416:	0c 0f       	add	r16, r28
 418:	11 1d       	adc	r17, r1
 41a:	f8 01       	movw	r30, r16
 41c:	90 81       	ld	r25, Z
 41e:	91 11       	cpse	r25, r1
 420:	f2 cf       	rjmp	.-28     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	df 90       	pop	r13
 42e:	cf 90       	pop	r12
 430:	08 95       	ret

00000432 <SerialPort_Get_Char_From_Buffer>:
 432:	dc 01       	movw	r26, r24
 434:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <RXindice_lectura>
 438:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <RXindice_escritura>
 43c:	29 17       	cp	r18, r25
 43e:	70 f4       	brcc	.+28     	; 0x45c <SerialPort_Get_Char_From_Buffer+0x2a>
 440:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <RXindice_lectura>
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e3 5c       	subi	r30, 0xC3	; 195
 448:	fd 4f       	sbci	r31, 0xFD	; 253
 44a:	80 81       	ld	r24, Z
 44c:	8c 93       	st	X, r24
 44e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <RXindice_lectura>
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <RXindice_lectura>
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret
 45c:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <RXindice_lectura>
 460:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <RXindice_escritura>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret

00000468 <SerialPort_Get_String_From_Buffer>:
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	1f 92       	push	r1
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	8c 01       	movw	r16, r24
 478:	19 82       	std	Y+1, r1	; 0x01
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	0e 94 19 02 	call	0x432	; 0x432 <SerialPort_Get_Char_From_Buffer>
 482:	88 23       	and	r24, r24
 484:	31 f0       	breq	.+12     	; 0x492 <SerialPort_Get_String_From_Buffer+0x2a>
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	f8 01       	movw	r30, r16
 48a:	81 93       	st	Z+, r24
 48c:	8f 01       	movw	r16, r30
 48e:	8a 30       	cpi	r24, 0x0A	; 10
 490:	a1 f7       	brne	.-24     	; 0x47a <SerialPort_Get_String_From_Buffer+0x12>
 492:	f8 01       	movw	r30, r16
 494:	10 82       	st	Z, r1
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0f 90       	pop	r0
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <mostrarMenu>:

//Funciones para el TP

void mostrarMenu(){
	SerialPort_Send_String("Registrador de temperatura y humedad \n\r");
 4a4:	87 e5       	ldi	r24, 0x57	; 87
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
	SerialPort_Send_String("Ingrese alguno de estos comandos en la terminal para iniciar: \n\r");
 4ac:	8f e7       	ldi	r24, 0x7F	; 127
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
	SerialPort_Send_String("'ON'<Enter>  - Enciende el Registrador \n\r");
 4b4:	80 ec       	ldi	r24, 0xC0	; 192
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
	SerialPort_Send_String("'OFF'<Enter> - Apaga el Registrador \n\r");
 4bc:	8a ee       	ldi	r24, 0xEA	; 234
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
	SerialPort_Send_String("'RST'<Enter> - Reinicia el programa \n\r");
 4c4:	81 e1       	ldi	r24, 0x11	; 17
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
	SerialPort_Send_String(">\n");
 4cc:	88 e3       	ldi	r24, 0x38	; 56
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <SerialPort_Send_String>
 4d4:	08 95       	ret

000004d6 <__vector_18>:
}

ISR(USART_RX_vect){		//Interrupcion de que hay algo para recibir de la UART
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
	RX_Buffer[RXindice_escritura]= UDR0;	//Guarda el valor ingresado en el buffer
 4e6:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <RXindice_escritura>
 4ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	e3 5c       	subi	r30, 0xC3	; 195
 4f2:	fd 4f       	sbci	r31, 0xFD	; 253
 4f4:	80 83       	st	Z, r24
	if (RX_Buffer[RXindice_escritura]=='\r')	//Si el valor guardado es un ENTER
 4f6:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <RXindice_escritura>
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	e3 5c       	subi	r30, 0xC3	; 195
 4fe:	fd 4f       	sbci	r31, 0xFD	; 253
 500:	80 81       	ld	r24, Z
 502:	8d 30       	cpi	r24, 0x0D	; 13
 504:	51 f4       	brne	.+20     	; 0x51a <__vector_18+0x44>
	{
		RX_Buffer[RXindice_escritura]= '\0';	//Remplaza el valor por un vacio '\0'
 506:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <RXindice_escritura>
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	e3 5c       	subi	r30, 0xC3	; 195
 50e:	fd 4f       	sbci	r31, 0xFD	; 253
 510:	10 82       	st	Z, r1
		flag_enter = 1;	//Activa el flag de que se apreto ENTER
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <flag_enter>
 518:	12 c0       	rjmp	.+36     	; 0x53e <__vector_18+0x68>
	}else
	{
		if (RXindice_escritura==(RX_BUFFER_LENGTH-1)) //Si i llego a la posicion maxima del buffer
 51a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <RXindice_escritura>
 51e:	8f 31       	cpi	r24, 0x1F	; 31
 520:	49 f4       	brne	.+18     	; 0x534 <__vector_18+0x5e>
		{
			RXindice_escritura=0;	//Resetea el valor
 522:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <RXindice_escritura>
			RX_Buffer[RXindice_escritura]= 'a';	//Se pone una 'a' en la primera posicion para que ya el valor quede invalido y el usuario pueda seguir ingresando caracteres
 526:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <RXindice_escritura>
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	e3 5c       	subi	r30, 0xC3	; 195
 52e:	fd 4f       	sbci	r31, 0xFD	; 253
 530:	81 e6       	ldi	r24, 0x61	; 97
 532:	80 83       	st	Z, r24
		}
		RXindice_escritura++;	//Se incrementa el indice
 534:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <RXindice_escritura>
 538:	8f 5f       	subi	r24, 0xFF	; 255
 53a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <RXindice_escritura>
	}
}
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	8f 91       	pop	r24
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <__vector_19>:

ISR(USART_UDRE_vect)	//Interrupcion de que se puede transmitir en la UART
{
 54e:	1f 92       	push	r1
 550:	0f 92       	push	r0
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	0f 92       	push	r0
 556:	11 24       	eor	r1, r1
 558:	2f 93       	push	r18
 55a:	3f 93       	push	r19
 55c:	4f 93       	push	r20
 55e:	5f 93       	push	r21
 560:	6f 93       	push	r22
 562:	7f 93       	push	r23
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
	if (TXindice_lectura != TXindice_escritura) //Si tengo datos para transmitir
 570:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <TXindice_lectura>
 574:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <TXindice_escritura>
 578:	98 17       	cp	r25, r24
 57a:	99 f0       	breq	.+38     	; 0x5a2 <__vector_19+0x54>
	{
		UDR0= TX_Buffer[TXindice_lectura]; //Transmito un caracter del buffer
 57c:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <TXindice_lectura>
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	e3 5a       	subi	r30, 0xA3	; 163
 584:	fd 4f       	sbci	r31, 0xFD	; 253
 586:	80 81       	ld	r24, Z
 588:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		TXindice_lectura= (TXindice_lectura+1)%(TX_BUFFER_LENGTH-1);	//Incremento en uno el valor del indice de lectura o lo reseteo si llego al limite
 58c:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <TXindice_lectura>
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	6f e1       	ldi	r22, 0x1F	; 31
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__divmodhi4>
 59c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <TXindice_lectura>
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__vector_19+0x58>
	}else //Si no hay mas nada para transmitir
	{
		SerialPort_TX_Interrupt_Disable(); //Desactivo las interrupciones de transmision
 5a2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <SerialPort_TX_Interrupt_Disable>
	}
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <get_flag_enter>:

uint8_t get_flag_enter(void) //Esta funcion devuelve el valor del flag indicando si se presiono la tecla ENTER
{
	return flag_enter;
 5c8:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <flag_enter>
}
 5cc:	08 95       	ret

000005ce <set_flag_enter>:

void set_flag_enter(uint8_t valor) //Esta funcion asigna el valor del flag_enter por el valor pasado en la funcion
{
	flag_enter = valor;
 5ce:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <flag_enter>
 5d2:	08 95       	ret

000005d4 <__divmodhi4>:
 5d4:	97 fb       	bst	r25, 7
 5d6:	07 2e       	mov	r0, r23
 5d8:	16 f4       	brtc	.+4      	; 0x5de <__divmodhi4+0xa>
 5da:	00 94       	com	r0
 5dc:	07 d0       	rcall	.+14     	; 0x5ec <__divmodhi4_neg1>
 5de:	77 fd       	sbrc	r23, 7
 5e0:	09 d0       	rcall	.+18     	; 0x5f4 <__divmodhi4_neg2>
 5e2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__udivmodhi4>
 5e6:	07 fc       	sbrc	r0, 7
 5e8:	05 d0       	rcall	.+10     	; 0x5f4 <__divmodhi4_neg2>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__divmodhi4_exit>

000005ec <__divmodhi4_neg1>:
 5ec:	90 95       	com	r25
 5ee:	81 95       	neg	r24
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	08 95       	ret

000005f4 <__divmodhi4_neg2>:
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255

000005fa <__divmodhi4_exit>:
 5fa:	08 95       	ret

000005fc <__udivmodhi4>:
 5fc:	aa 1b       	sub	r26, r26
 5fe:	bb 1b       	sub	r27, r27
 600:	51 e1       	ldi	r21, 0x11	; 17
 602:	07 c0       	rjmp	.+14     	; 0x612 <__udivmodhi4_ep>

00000604 <__udivmodhi4_loop>:
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	a6 17       	cp	r26, r22
 60a:	b7 07       	cpc	r27, r23
 60c:	10 f0       	brcs	.+4      	; 0x612 <__udivmodhi4_ep>
 60e:	a6 1b       	sub	r26, r22
 610:	b7 0b       	sbc	r27, r23

00000612 <__udivmodhi4_ep>:
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	5a 95       	dec	r21
 618:	a9 f7       	brne	.-22     	; 0x604 <__udivmodhi4_loop>
 61a:	80 95       	com	r24
 61c:	90 95       	com	r25
 61e:	bc 01       	movw	r22, r24
 620:	cd 01       	movw	r24, r26
 622:	08 95       	ret

00000624 <strcmp>:
 624:	fb 01       	movw	r30, r22
 626:	dc 01       	movw	r26, r24
 628:	8d 91       	ld	r24, X+
 62a:	01 90       	ld	r0, Z+
 62c:	80 19       	sub	r24, r0
 62e:	01 10       	cpse	r0, r1
 630:	d9 f3       	breq	.-10     	; 0x628 <strcmp+0x4>
 632:	99 0b       	sbc	r25, r25
 634:	08 95       	ret

00000636 <__itoa_ncheck>:
 636:	bb 27       	eor	r27, r27
 638:	4a 30       	cpi	r20, 0x0A	; 10
 63a:	31 f4       	brne	.+12     	; 0x648 <__itoa_ncheck+0x12>
 63c:	99 23       	and	r25, r25
 63e:	22 f4       	brpl	.+8      	; 0x648 <__itoa_ncheck+0x12>
 640:	bd e2       	ldi	r27, 0x2D	; 45
 642:	90 95       	com	r25
 644:	81 95       	neg	r24
 646:	9f 4f       	sbci	r25, 0xFF	; 255
 648:	0c 94 27 03 	jmp	0x64e	; 0x64e <__utoa_common>

0000064c <__utoa_ncheck>:
 64c:	bb 27       	eor	r27, r27

0000064e <__utoa_common>:
 64e:	fb 01       	movw	r30, r22
 650:	55 27       	eor	r21, r21
 652:	aa 27       	eor	r26, r26
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	aa 1f       	adc	r26, r26
 65a:	a4 17       	cp	r26, r20
 65c:	10 f0       	brcs	.+4      	; 0x662 <__utoa_common+0x14>
 65e:	a4 1b       	sub	r26, r20
 660:	83 95       	inc	r24
 662:	50 51       	subi	r21, 0x10	; 16
 664:	b9 f7       	brne	.-18     	; 0x654 <__utoa_common+0x6>
 666:	a0 5d       	subi	r26, 0xD0	; 208
 668:	aa 33       	cpi	r26, 0x3A	; 58
 66a:	08 f0       	brcs	.+2      	; 0x66e <__utoa_common+0x20>
 66c:	a9 5d       	subi	r26, 0xD9	; 217
 66e:	a1 93       	st	Z+, r26
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	79 f7       	brne	.-34     	; 0x652 <__utoa_common+0x4>
 674:	b1 11       	cpse	r27, r1
 676:	b1 93       	st	Z+, r27
 678:	11 92       	st	Z+, r1
 67a:	cb 01       	movw	r24, r22
 67c:	0c 94 40 03 	jmp	0x680	; 0x680 <strrev>

00000680 <strrev>:
 680:	dc 01       	movw	r26, r24
 682:	fc 01       	movw	r30, r24
 684:	67 2f       	mov	r22, r23
 686:	71 91       	ld	r23, Z+
 688:	77 23       	and	r23, r23
 68a:	e1 f7       	brne	.-8      	; 0x684 <strrev+0x4>
 68c:	32 97       	sbiw	r30, 0x02	; 2
 68e:	04 c0       	rjmp	.+8      	; 0x698 <strrev+0x18>
 690:	7c 91       	ld	r23, X
 692:	6d 93       	st	X+, r22
 694:	70 83       	st	Z, r23
 696:	62 91       	ld	r22, -Z
 698:	ae 17       	cp	r26, r30
 69a:	bf 07       	cpc	r27, r31
 69c:	c8 f3       	brcs	.-14     	; 0x690 <strrev+0x10>
 69e:	08 95       	ret

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
